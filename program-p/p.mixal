* r2 - new prime offset
* r3 - current prime offset
* r4 - N, current number to test
PRINTER EQU     18
N       EQU     500           * CHANGEME - note: comments relative to N=500
PRIME   EQU     0             * 0   first prime (primes 0-499)
PRIMEE  EQU     PRIME+N-1     * 499 one past last prime
P1OFF   EQU     PRIME-PRIMEE  * -499 offset to first prime
BUF1    EQU     PRIMEE+1      * 500-523 buffer 1, 524 buffer 2 offset
BUF2    EQU     BUF1+25       * 525-548 buffer 2, 549 buffer 1 offset
BUFE    EQU     BUF2+24       * 549 end of buffer region
BUF1OFF EQU     BUF1-BUFE     
BUF2OFF EQU     BUF2-BUFE
        ORIG    3000
START   ENT2    P1OFF+1       * start with second prime
        ENT3    P1OFF         * start testing with first prime  
        ENT4    3             * next N is 3
TESTP   ENTA    0             * load N into rAX
        ENTX    0,4
        DIV     PRIMEE,3      * divide N by the current prime
        JXZ     ADVN          * if remainder is zero, not prime, move to next N
        CMPA    PRIMEE,3      * see if the quotient is less than the current prime
        INC3    1             * advance current prime
        JG      TESTP         * keep testing primes as long as the quotient is greater than the prime
STP     ST4     PRIMEE,2      * store N in the next prime offset
        INC2    1             * update the counters for the next number
        J2P     PDONE          * accounted for the last prime, PRIMES DONE
ADVN    ENT3    P1OFF         * advance N, resetting the prime to check
        INC4    2
        JMP     TESTP
* r2 - current prime offset
* r3 - current buffer offset
* r4 - buffer counter
PDONE   ENT2    P1OFF         * start at first prime
        ENT3    BUF1OFF+1     * start at second index of first buffer (we never populate the first indexes)
        ENT4    10            * start buffer counter for the first 10 spots
        IOC     0(PRINTER)
PPRIME  LDA     PRIMEE,2      * load current prime
        CHAR
        STX     BUFE,3(2:5)   * store prime characters
        J2Z     PRINTD        * stored last prime, PRINT and DONE
        INC2    50            * advance prime block
        INC3    1
        DEC4    1    
        J4P     PPRIME          * > still have room in buffer, continue
        DEC3    11              * PRINT BUFFER: move buffer offset to beginnig of buffer
        OUT     BUFE,3(PRINTER) * print buffer
        INC3    24              * switch buffer offset - move the offset to 1 past the end of the buffer
        LD3     BUFE,3
        INC3    1               * buffer offset at (+1) the other buffer
        ENT4    10              * reset buffer counter
        DEC2    N-1             * reset prime offset to (+1) the last initial prime offset
        JMP     PPRIME
PRINTD  DEC3    10              * PRINT BUFFER: move buffer offset to beginnig of buffer
        OUT     BUFE,3(PRINTER) * print buffer
DONE    HLT
        ORIG    0
        CON     2           * first prime is 2
        END     START
